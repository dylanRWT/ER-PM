%% gammaMixtureMaker_singleimages
%
% Created by Dylan Greening for use in RWTurner Lab UCALGARY
%
% script which reads specially structured folders to calculate the gamma
% mixture model of in-channel and cross-channel nearest neighbour data
% generated by LAMA_CSR
% 
% Requiers the functions:
% gMM_s1_bargraph = for visualization of results
% LAMA_CSR_err = to calculate error and mean stats
%%
close all
clear 
clc
%
parent = "../UIA output";
dirinput = dir(strcat(parent,'/'));                   % look at all of the folders in the current directory
dirinput = struct2table(dirinput);            
pullout = dirinput.isdir == 1 ;        % only look at directories
dirf = dirinput.name(pullout);         %
dirf = dirf(~ismember(dirf,'.'));       % remove unneeded names from list
dirf = dirf(~ismember(dirf,'..'));
diroutput = strcat(parent,'/');
filecount = 1; % this is a counter for the table index
% generate a master table to hold this info
% dataset / channel-pair / images / centroids / COD / mode / threshold /
% shape / rate / height / mixing portion
mastertable = table('Size',[height(dirf)*60,22],'VariableTypes', ...
    {'cellstr','cellstr','double','double','double', ...
    'double','double','double','double','double', ...
    'double','double','double','double','double', ...
    'double','double','double','double','double','double','double'},'VariableNames',...
    {'folder','channelpair','numImages','numCentroids','COD', ...
    'modeA','medianA','meanA','thresholdA','shapeA','rateA','heightA','mixingportionA', ...
    'modeB','medianB','meanB','thresholdB','shapeB','rateB','heightB','mixingportionB','ExitFlag'});

options = optimoptions('lsqnonlin','MaxIter',4000,'TolFun', 1e-12, 'MaxFunEvals', 2000 ,'TolX', 1e-12); 
% phase,alpha,beta,height
lb = [0,1,1,1,200,1,1,1];
ub = [300,10,100,1e7,800,10,350,1e6];
% use a for loop to scan each list
%%
for folder = 1:height(dirf)
   
    files = dir(strcat(parent,"/",dirf{folder,1},'/NND')); % look at the files in a directory was gettmonthly free     
    files = {files.name};
    pullout = false(1,width(files));
    for w = 1:width(files)          % only list .csv
        if contains(files{w},'.csv')
            pullout(1,w) = 1; 
        end
    end
    files = files(1,pullout);
    disp(sum(pullout))
   
    dataset = dirf{folder};
    for w = 1:width(files) % look at each .csv
        close all
        ch_pair = extractBefore(files{w},'.csv');
        if length(ch_pair) == 2 % if the coded name suggests they are the same channel 
            if strcmp(ch_pair(1),ch_pair(2))
                peak2 = 1; % if we anticipate a mixure model
            else
                peak2 = 0; % else we anticipate a direct fit of one gamma distribution
            end
        else % is the little name is longer than 2 characters
            if strcmp(ch_pair(1),ch_pair(2)) && ~strcmp(ch_pair(3:5),'csr') % see if its a csr data set and same channel
                peak2 = 1;
            else
                peak2 = 0;
            end
        end
        figure('Name',strcat(dirf{folder,1},files{w}))
        data = readmatrix(strcat(parent,"/",dataset,'/NND/',files{1,w})); % read in data of the current .csv
        
        % determine the number of tiles for the subplot
        images = width(data);     % how many images make up this data set      
        if images > 16
            images = 16;
        end
        if rem(images,2) == 0         % if it is even
            specialsubplots = images;
        else
            specialsubplots = images + 1;    % if it is odd add an extra tile to the subplots
        end
        % find the factors of specialsubplots
        if rem(sqrt(specialsubplots),1)==0
            plotheight = sqrt(specialsubplots);
            plotwidth = plotheight;
        else
            K = 1:specialsubplots;
            D = K(rem(specialsubplots,K)==0);
            plotheight = D(idivide(int8(length(D)),2,'floor'));
            plotwidth = D(idivide(int8(length(D)),2,'floor')+1);
        end
        %
         % prep a table for holding fiting variables
            temp_solved_coefftable = zeros(width(data),8);
        for i = 1:width(data)    % for each image in the .csv
            tempdata = data(~isnan(data(:,i)),i);   % remove nans
            tempdata = sort(tempdata);              % sort the neighbour distances
            centroids = height(tempdata);           % count how many measures there are  
            [yorig,edges] =  histcounts(tempdata,0:25:2000);   % use the bin heights to define the y-values                    
            centers = edges(1:(end-1))+((edges(2)-edges(1))/2);           
            gaMM1 = @(z) pdf("Gamma",centers-z(1),z(2),z(3))*z(4);    % define a gammamodel  %phase alpha beta height
            if peak2 == 1
                beta = [10,20]; % set initial testing parameters
                alpha = [2,5];
                phase = [5,150];
                high = [1000*283,1000*283];
                gaMM2 = @(z) (pdf("Gamma",centers-z(1),z(2),z(3))*z(4) + pdf("Gamma",centers-z(5),z(6),z(7))*z(8));
                initial = [phase(1),alpha(1),beta(1),high(1),phase(2),alpha(2),beta(2),high(2)];
                %  phase, alpha, beta, high
                [solcoeff,normres,res,e_flag,~,lambda] = lsqnonlin(@(z) (gaMM2(z)-yorig),initial,lb,ub,options);
                yout = gaMM2(solcoeff);
                R2 = gfit2(yout,yorig,'8');
                gamAarea = trapz(centers,gaMM1(solcoeff(1:4)));
                gamBarea = trapz(centers,gaMM1(solcoeff(5:8)));
                totarea = trapz(centers,yout);
                Aout = spline(centers,gaMM1(solcoeff(1:4)),1:2000);
                [~,AI] = max(Aout);
                Atable = tableconverter(1:2000,Aout);
                meanA = mean(Atable);
                medianA = median(Atable);
                Bout = spline(centers,gaMM1(solcoeff(5:8)),1:2000);
                [~,BI] = max(Bout);
                Btable = tableconverter(1:2000,Bout);
                meanB = mean(Btable);
                medianB = median(Btable);
                if i <= images
                subplot(plotheight,plotwidth,i)
                histogram(tempdata,'BinEdges',0:25:2000), hold on
                plot(centers,gaMM1(solcoeff(1:4)),'r-')
                plot(centers,gaMM1(solcoeff(5:8)),'g-')
                plot(centers,yout,'k','LineWidth',2), hold off
                end
                 % prep a table for holding fiting variables
    temp_solved_coefftable(i,1:8) = solcoeff;
            else
                beta = [10,20];
                alpha = [15,20];
                phase = [5,150];
                high = [1000*283,1000*283];
                initial = [phase(1),alpha(1),beta(1),high(1)];
                [solcoeff,normres,res,e_flag,~,lambda] = lsqnonlin(@(z) (gaMM1(z)-yorig),initial,lb(1,1:4),ub(1,1:4),options);
                yout = gaMM1(solcoeff);
                R2 = gfit2(yout,yorig,'8');
                Xout = spline(centers,yout,0:1:2000);
                [~,XI] = max(Xout);
                Xtable = tableconverter(centers,gaMM1(solcoeff(1:4)));
                meanX = mean(Xtable);
                medianX = median(Xtable);
                fiterror = ((medianX-median(tempdata))/median(tempdata))*100;
                if i <= images
                subplot(plotheight,plotwidth,i)
                histogram(tempdata,'BinEdges',0:25:2000),hold on
                %text(1000,max(yout)*0.8,strcat("COD = ", num2str(round(R2,4))))
                %text(1000,max(yout)*0.6,strcat(" mode = ",num2str(XI)," median = ",num2str(round(medianX))," mean = ",num2str(round(meanX))))
                plot(centers,yout,'k','LineWidth',2), hold off
                end
            end       

            % generate the table with the info
            % dataset / channel-pair / images / centroids / COD / mode / threshold /
            % shape / rate / height / mixing portion
            mastertable{filecount,1} = {dataset};
            mastertable{filecount,2} = {ch_pair};
            mastertable{filecount,3} = width(data);
            mastertable{filecount,4} = centroids;
            mastertable{filecount,5} = R2;
            if peak2 == 0
                mastertable{filecount,6:13} = [XI,round(medianX),round(meanX),-1*solcoeff(1),solcoeff(2:4),1];
                mastertable{filecount,14:22} = [NaN,NaN,NaN,NaN,NaN,NaN,NaN,fiterror,e_flag];
            elseif peak2 ==1
                mastertable{filecount,6:22} = [AI,round(medianA),round(meanA),-1*solcoeff(1),solcoeff(2:4),gamAarea/totarea,...
                BI,round(medianB),round(meanB),-1*solcoeff(5),solcoeff(6:8),gamBarea/totarea,e_flag];
            end
            filecount = filecount + 1;
        end
        mkdir(strcat(parent,'/',dataset,'/singles'))
        saveas(gcf,strcat(parent,'/',dataset,'/singles/',dataset,'_',extractBefore(files{1,w},'.csv'),'singles.pdf'))
    end
end
%%
close all
writetable(mastertable,strcat(parent,'/masterNNDtableGammasSingles.csv'));
save(strcat(parent,'/masterNNDtableGammasSingles_workspace'))
%% now look at each case and derive ranges for the values
close all
CODlim = 0.8;
mixlim = 0.10;
setNames = {'11_NND','22_NND','BB_NND','CC_NND','KK_NND','NN_NND','RR_NND','SS_NND'};
[mu_inch,sem_inch,INchD] = gMM_s1_bargraph(mastertable,setNames,CODlim,mixlim,2,1,'median');
%%
subplot(2,2,1)
swft(INchD{1,4})
histogram(INchD{1,4})
subplot(2,2,2)
swft(INchD{1,5})
histogram(INchD{1,5})
subplot(2,2,3)
swft(INchD{1,6})
histogram(INchD{1,6})
subplot(2,2,4)
swft(INchD{1,7})
histogram(INchD{1,7})
%%
[~,pCCKK,stat_CCKK] = ttest2(INchD{1,4} , INchD{1,5});
[~,pCCRR,stat_CCRR] = ttest2(INchD{1,4} , INchD{1,7});
[~,pKKRR,stat_KKRR] = ttest2(INchD{1,5} , INchD{1,7});
[~,pNNCC,stat_NNCC] = ttest2(INchD{1,4} , INchD{1,6});
[~,pNNKK,stat_NNKK] = ttest2(INchD{1,5} , INchD{1,6});
[~,pNNRR,stat_NNRR] = ttest2(INchD{1,7} , INchD{1,6});

%% setNames = {'11csr_NND','22csr_NND','BBcsr_NND','CCcsr_NND','KKcsr_NND','NNcsr_NND','RRcsr_NND','SScsr_NND'};
%[mu_csrch,sem_csrch] = gMM_s1_bargraph(mastertable,setNames,CODlim,mixlim,1,1,'median');
setNames = {'CK_NND','CR_NND','NK_NND','RK_NND'};
[mu_xch,sem_xch,XchD] = gMM_s1_bargraph(mastertable,setNames,CODlim,mixlim,1,1,'median');
%%
swft(XchD{1,1})
%%
swft(XchD{1,2})
%%
swft(XchD{1,3})
%%
swft(XchD{1,4})
%%
[~,pNKCK,stat_NKCK] = ttest2(XchD{1,1} , XchD{1,3});
[~,pNKCR,stat_NKCR] = ttest2(XchD{1,2} , XchD{1,3});
[~,pNKKR,stat_NKKR] = ttest2(XchD{1,4} , XchD{1,3});
%%
setNames = {'11_NND','22_NND','BB_NND','CC_NND','KK_NND','NN_NND','RR_NND','SS_NND'};
[~,~] = gMM_s1_bargraph(mastertable,setNames,CODlim,mixlim,2,1,'mean');

setNames = {'11csr_NND','22csr_NND','BBcsr_NND','CCcsr_NND','KKcsr_NND','NNcsr_NND','RRcsr_NND','SScsr_NND'};
[~,~] = gMM_s1_bargraph(mastertable,setNames,CODlim,mixlim,1,1,'mean');

setNames = {'2K_NND','2R_NND','2S_NND','C1_NND','CK_NND','CR_NND','CS_NND','K1_NND','NB_NND','NK_NND','R1_NND','RK_NND','RS_NND','S1_NND','SK_NND'};
[~,~] = gMM_s1_bargraph(mastertable,setNames,CODlim,mixlim,1,1,'mean');

setNames = {'11_NND','22_NND','BB_NND','CC_NND','KK_NND','NN_NND','RR_NND','SS_NND'};
[~,~] = gMM_s1_bargraph(mastertable,setNames,CODlim,mixlim,2,1,'mode');

setNames = {'11csr_NND','22csr_NND','BBcsr_NND','CCcsr_NND','KKcsr_NND','NNcsr_NND','RRcsr_NND','SScsr_NND'};
[~,~] = gMM_s1_bargraph(mastertable,setNames,CODlim,mixlim,1,1,'mode');

setNames = {'2K_NND','2R_NND','2S_NND','C1_NND','CK_NND','CR_NND','CS_NND','K1_NND','NB_NND','NK_NND','R1_NND','RK_NND','RS_NND','S1_NND','SK_NND'};
[~,~] = gMM_s1_bargraph(mastertable,setNames,CODlim,mixlim,1,1,'mode');
%%
